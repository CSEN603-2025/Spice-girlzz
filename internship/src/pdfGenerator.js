// src/utils/pdfGenerator.js
import { PDFDocument, StandardFonts, rgb } from 'pdf-lib';
import jsPDF from 'jspdf';

// Generate a simple internship report PDF using pdf-lib
export const generateDummyPDF = async (report) => {
  try {
    const pdfDoc = await PDFDocument.create();
    const page = pdfDoc.addPage();
    const { width, height } = page.getSize();
    const font = await pdfDoc.embedFont(StandardFonts.Helvetica);
    
    const text = `
      Internship Report
      ================
      
      Student: ${report.student}
      Major: ${report.major}
      Company: ${report.company}
      Status: ${report.status}
      
      Report Details:
      ${report.details}
    `;
    
    page.drawText(text, {
      x: 50,
      y: height - 50,
      size: 12,
      font,
      color: rgb(0, 0, 0),
    });
    
    const pdfBytes = await pdfDoc.save();
    downloadBlob(pdfBytes, `Report_${report.student.replace(' ', '_')}_${report.id}.pdf`);
  } catch (error) {
    console.error('Error generating PDF:', error);
    throw error;
  }
};

// Generate comprehensive statistics report using pdf-lib
export const generateStatisticsReport = async (stats) => {
  try {
    const now = new Date();
    const pdfDoc = await PDFDocument.create();
    const page = pdfDoc.addPage([600, 800]);
    const { width, height } = page.getSize();
    const font = await pdfDoc.embedFont(StandardFonts.Helvetica);
    const boldFont = await pdfDoc.embedFont(StandardFonts.HelveticaBold);
    
    let yPosition = height - 50;
    
    // Header
    page.drawText('Internship Program Statistics Report', {
      x: 50,
      y: yPosition,
      size: 20,
      font: boldFont,
      color: rgb(0, 0, 0.5),
    });
    yPosition -= 30;
    
    // Date
    page.drawText(`Generated on: ${now.toLocaleString()}`, {
      x: 50,
      y: yPosition,
      size: 10,
      font,
      color: rgb(0.5, 0.5, 0.5),
    });
    yPosition -= 40;
    
    // Summary Statistics
    addSection(page, '1. Summary Statistics', 50, yPosition, boldFont);
    yPosition -= 25;
    
    const totalReports = (stats.reportsPerCycle?.accepted || 0) + 
                       (stats.reportsPerCycle?.rejected || 0) + 
                       (stats.reportsPerCycle?.flagged || 0) + 
                       (stats.reportsPerCycle?.pending || 0);
    const acceptedPercentage = totalReports ? 
      Math.round((stats.reportsPerCycle?.accepted / totalReports) * 100) : 0;
    
    const summaryText = [
      `Total Reports: ${totalReports}`,
      `Accepted: ${stats.reportsPerCycle?.accepted || 0} (${acceptedPercentage}%)`,
      `Rejected: ${stats.reportsPerCycle?.rejected || 0}`,
      `Flagged: ${stats.reportsPerCycle?.flagged || 0}`,
      `Pending: ${stats.reportsPerCycle?.pending || 0}`,
      `Average Review Time: ${stats.averageReviewTime || 'N/A'}`
    ].join('\n');
    
    addText(page, summaryText, 60, yPosition, font);
    yPosition -= 100;
    
    // Popular Courses
    if (stats.popularCourses?.length) {
      addSection(page, '2. Popular Courses', 50, yPosition, boldFont);
      yPosition -= 25;
      
      stats.popularCourses.forEach((course, index) => {
        const courseText = typeof course === 'string' ? course : `${course.name}: ${course.reports} reports`;
        addText(page, `${index + 1}. ${courseText}`, 60, yPosition, font);
        yPosition -= 20;
      });
      yPosition -= 20;
    }
    
    // Top Companies
    if (stats.topCompanies?.length) {
      addSection(page, '3. Top Companies', 50, yPosition, boldFont);
      yPosition -= 25;
      
      stats.topCompanies.forEach((company, index) => {
        const companyText = typeof company === 'string' ? company : `${company.name} (Rating: ${company.rating}): ${company.reports} interns`;
        addText(page, `${index + 1}. ${companyText}`, 60, yPosition, font);
        yPosition -= 20;
      });
      yPosition -= 30;
    }
    
    // Footer
    page.drawText('Generated by Faculty Dashboard System', {
      x: 50,
      y: 30,
      size: 10,
      font,
      color: rgb(0.5, 0.5, 0.5),
    });
    
    const pdfBytes = await pdfDoc.save();
    downloadBlob(pdfBytes, `Internship_Statistics_Report_${formatDate(now)}.pdf`);
  } catch (error) {
    console.error('Error generating statistics report:', error);
    throw error;
  }
};

// Generate PDF using jsPDF (simpler alternative)
export const downloadPDF = (report) => {
  try {
    const doc = new jsPDF();
    
    doc.setFontSize(16);
    doc.text("Internship Report", 20, 20);
    
    doc.setFontSize(12);
    const fields = [
      `Student: ${report.student}`,
      `Major: ${report.major}`,
      `Company: ${report.company}`,
      `Supervisor: ${report.supervisor || 'N/A'}`,
      `Period: ${report.startDate} to ${report.endDate}`,
      `Status: ${report.status}`
    ];
    
    let yPosition = 40;
    fields.forEach(field => {
      doc.text(field, 20, yPosition);
      yPosition += 10;
    });
    
    if (report.details) {
      yPosition += 5;
      doc.text('Details:', 20, yPosition);
      yPosition += 5;
      doc.text(doc.splitTextToSize(report.details, 160), 20, yPosition);
    }
    
    if (report.comments) {
      yPosition += 20;
      doc.text('Comments:', 20, yPosition);
      yPosition += 5;
      doc.text(doc.splitTextToSize(report.comments, 160), 20, yPosition);
    }
    
    doc.save(`${report.student}_report.pdf`);
  } catch (error) {
    console.error("Error generating PDF:", error);
    throw error;
  }
};

// Helper functions
function addSection(page, text, x, y, font) {
  page.drawText(text, {
    x,
    y,
    size: 14,
    font,
    color: rgb(0, 0, 0)
  });
}

function addText(page, text, x, y, font) {
  page.drawText(text, {
    x,
    y,
    size: 12,
    font,
    color: rgb(0, 0, 0),
    lineHeight: 15
  });
}

function downloadBlob(pdfBytes, filename) {
  const blob = new Blob([pdfBytes], { type: 'application/pdf' });
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = filename;
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  URL.revokeObjectURL(url);
}

function formatDate(date) {
  return `${date.getFullYear()}_${date.getMonth() + 1}_${date.getDate()}`;
}